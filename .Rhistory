monthly <- subset(planner, FrequenciaDia == 30 | FrequenciaDia == 31)
#Efetua o preenchimento do calendário para pacientes com frequencia diaria.
tryCatch({
for(i in 1:nrow(daily)) {
ifelse(daily[i, ]$InicioPeriodo == daily[i, ]$FimPeriodo,
daily[i , as.character(daily[i, "InicioPeriodo"])] <- daily[i, "QuantidadeTotal"],
ifelse(daily[i, ]$QuantidadeTotal <= numberOfDays+1 & daily[i, ]$QuantidadeEventos == 1,
{
qtdEventos <- daily[i, ]$QuantidadeTotal
period <- as.character(seq.Date(daily[i, "InicioPeriodo"], daily[i, "FimPeriodo"], 1))
totalAllocation <- names(sort(colSums(daily[, 9:ncol(daily)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
daily[i, bestAllocation] <- daily[i, "QuantidadeEventos"]
},
ifelse(daily[i, "QuantidadeTotal"] %% daily[i, "QuantidadeEventos"] == 0,
{
qtdEventos <- daily[i, ]$QuantidadeTotal %/% daily[i, ]$QuantidadeEventos
period <- as.character(seq.Date(daily[i, "InicioPeriodo"], daily[i, "FimPeriodo"], 1))
totalAllocation <- names(sort(colSums(daily[, 9:ncol(daily)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
daily[i, bestAllocation] <- daily[i, "QuantidadeEventos"]
},
{
qtdEventos <- daily[i, ]$QuantidadeTotal
period <- as.character(seq.Date(daily[i, "InicioPeriodo"], daily[i, "FimPeriodo"], 1))
totalAllocation <- names(sort(colSums(daily[, 9:ncol(daily)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
daily[i, bestAllocation] <- daily[i, "QuantidadeEventos"]
daily[i, last(sort(bestAllocation))] <- daily[i, last(sort(bestAllocation))] - (qtdEventos %% daily[i, "QuantidadeEventos"])
}
)
)
)
}
}, error = function(e) {
cat("Erro ao preencher agendamentos diários: ", conditionMessage(e), "\n")
})
#Efetua o preenchimento do calendário para pacientes com frequencia dia sim, dia nao.
tryCatch({
mainPlanner <- rbind(daily, dayOnDayOff)
processedDayOnDayOff <- do.call(rbind, lapply(split(dayOnDayOff, dayOnDayOff$Id), function(row){
qtdEventos <- row$QuantidadeTotal
period <- as.character(seq.Date(row$InicioPeriodo, row$FimPeriodo, 2))
totalAllocation <- names(sort(colSums(mainPlanner[, 9:ncol(mainPlanner)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
row[, bestAllocation] <- 1
return(row)
}))
mainPlanner[which(mainPlanner$Id %in% processedDayOnDayOff$Id), ] <- processedDayOnDayOff
}, error = function(e) {
cat("Erro ao preencher agendamentos dia sim, dia nao: ", conditionMessage(e), "\n")
})
#Efetua o preenchimento do calendário para pacientes com frequencia semanal.
tryCatch({
mainPlanner <- rbind(mainPlanner, weekly)
for(i in min(which(mainPlanner$FrequenciaDia == 7)):nrow(mainPlanner)){
qtdEventos <- mainPlanner[i, ]$QuantidadeTotal
period <- as.character(seq.Date(mainPlanner[i, "InicioPeriodo"], mainPlanner[i, "FimPeriodo"], 1))
ifelse(mainPlanner[i, ]$QuantidadeEventos == 6,
{
weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sun")
},
ifelse(mainPlanner[i, ]$QuantidadeEventos == 5,
{weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sun" & weekday != "Sat")},
ifelse(mainPlanner[i, ]$QuantidadeEventos == 4,
{weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sun" & weekday != "Sat" & weekday != "Wed")},
ifelse(mainPlanner[i, ]$QuantidadeEventos == 3,
{weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday == "Mon" | weekday == "Wed" | weekday == "Fri")},
ifelse(mainPlanner[i, ]$QuantidadeEventos == 2,
{weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday == "Tues" | weekday == "Thurs")},
ifelse(mainPlanner[i, ]$QuantidadeEventos == 1,
{weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday == "Wed" | weekday == "Tues" | weekday == "Thurs")},
print(mainPlanner[i, ])
)
)
)
)
)
)
period <- as.character(weekdayDf$period)
totalAllocation <- names(sort(colSums(mainPlanner[, 9:ncol(mainPlanner)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
mainPlanner[i, bestAllocation] <- 1
}
}, error = function(e) {
cat("Erro ao preencher agendamentos semanais: ", conditionMessage(e), "\n")
})
#Efetua o preenchimento do calendário para pacientes com frequencia quinzenal.
tryCatch({
mainPlanner <- rbind(mainPlanner, biweekly)
for(i in min(which(mainPlanner$FrequenciaDia == 16 | mainPlanner$FrequenciaDia == 15)):nrow(mainPlanner)){
ifelse(mainPlanner[i, ]$QuantidadeTotal == 2,
{
qtdEventos <- mainPlanner[i, ]$QuantidadeEventos
period <- as.character(seq.Date(mainPlanner[i, "InicioPeriodo"], mainPlanner[i, "FimPeriodo"], 1))
validDays <- c("Mon", "Tues", "Wed", "Thurs", "Fri")
firstHalf <- period[1:floor(length(period)/2)]
names(firstHalf) <- wday(firstHalf, label = T)
firstHalf <- subset(firstHalf, names(firstHalf) %in% validDays)
secondHalf <- period[(floor(length(period)/2)+1):length(period)]
names(secondHalf) <- wday(secondHalf, label = T)
secondHalf <- subset(secondHalf, names(secondHalf) %in% validDays)
weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sun")
#period <- as.character(weekdayDf$period)
totalAllocation <- names(sort(colSums(mainPlanner[, 9:ncol(mainPlanner)])))
bestAllocationFH <- totalAllocation[which(totalAllocation %in% firstHalf)]
bestAllocationFH <- bestAllocationFH[1:qtdEventos] %>% na.omit
distFromBAFH <- sapply(secondHalf, function(x){
as.integer(difftime(x, bestAllocationFH, units = "days"))
})
names(distFromBAFH) <- secondHalf
distFromBAFH <- distFromBAFH[distFromBAFH >= 13 & distFromBAFH <= 17] %>% names
bestAllocationSH <- totalAllocation[which(totalAllocation %in% distFromBAFH)]
bestAllocationSH <- bestAllocationSH[1:qtdEventos] %>% na.omit
bestAllocation <- c(bestAllocationFH, bestAllocationSH)
mainPlanner[i, bestAllocation] <- qtdEventos
},
{
qtdEventos <- mainPlanner[i, ]$QuantidadeTotal
period <- as.character(seq.Date(mainPlanner[i, "InicioPeriodo"], mainPlanner[i, "FimPeriodo"], 1))
weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sun" & weekday != "Sat")
period <- as.character(weekdayDf$period)
totalAllocation <- names(sort(colSums(daily[, 9:ncol(daily)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
mainPlanner[i, bestAllocation] <- mainPlanner[i, "QuantidadeEventos"]
}
)
}
}, error = function(e) {
cat("Erro ao preencher agendamentos quinzenais: ", conditionMessage(e), "\n")
})
#Efetua o preenchimento do calendário para pacientes com frequencia mensal.
tryCatch({
mainPlanner <- rbind(mainPlanner, monthly)
for(i in min(which(mainPlanner$FrequenciaDia == 31 | mainPlanner$FrequenciaDia == 30)):nrow(mainPlanner)) {
ifelse(mainPlanner[i, ]$QuantidadeEventos == 1,
{
qtdEventos <- mainPlanner[i, ]$QuantidadeTotal
period <- as.character(seq.Date(mainPlanner[i, "InicioPeriodo"], mainPlanner[i, "FimPeriodo"], 1))
weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sat" & weekday != "Sun")
period <- as.character(weekdayDf$period)
totalAllocation <- names(sort(colSums(mainPlanner[, 9:ncol(mainPlanner)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
mainPlanner[i, bestAllocation] <- 1
},
{
qtdEventos <- 1
period <- as.character(seq.Date(mainPlanner[i, "InicioPeriodo"], mainPlanner[i, "FimPeriodo"], 1))
validDays <- c("Mon", "Tues", "Wed", "Thurs", "Fri")
firstHalf <- period[1:floor(length(period)/2)]
names(firstHalf) <- wday(firstHalf, label = T)
firstHalf <- subset(firstHalf, names(firstHalf) %in% validDays)
secondHalf <- period[(floor(length(period)/2)+1):length(period)]
names(secondHalf) <- wday(secondHalf, label = T)
secondHalf <- subset(secondHalf, names(secondHalf) %in% validDays)
weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sun")
#period <- as.character(weekdayDf$period)
totalAllocation <- names(sort(colSums(mainPlanner[, 9:ncol(mainPlanner)])))
bestAllocationFH <- totalAllocation[which(totalAllocation %in% firstHalf)]
bestAllocationFH <- bestAllocationFH[1:qtdEventos] %>% na.omit
distFromBAFH <- sapply(secondHalf, function(x){
as.integer(difftime(x, bestAllocationFH, units = "days"))
})
names(distFromBAFH) <- secondHalf
distFromBAFH <- distFromBAFH[distFromBAFH >= 13 & distFromBAFH <= 17] %>% names
bestAllocationSH <- totalAllocation[which(totalAllocation %in% distFromBAFH)]
bestAllocationSH <- bestAllocationSH[1:qtdEventos] %>% na.omit
bestAllocation <- c(bestAllocationFH, bestAllocationSH)
mainPlanner[i, bestAllocation] <- 1
}
)
}
}, error = function(e) {
cat("Erro ao preencher agendamentos mensais: ", conditionMessage(e), "\n")
})
#Efetua o preenchimento do calendário para pacientes com valores de QuantidadeTotal, QuantidadeEventos ou FrequenciaDia diferentes do padrao existente.
tryCatch({
weirdBehavior <- data.frame(rowSums(mainPlanner[, 9:ncol(mainPlanner)]))
colnames(weirdBehavior) <- "sumOfRows"
weirdBehavior <- subset(weirdBehavior, sumOfRows == 0) %>% rownames
fixedWeirdBehavior <- do.call(rbind, lapply(split(mainPlanner[weirdBehavior, ], mainPlanner[weirdBehavior, "Id"]), function(row){
qtdEventos <- row$QuantidadeTotal
period <- as.character(seq.Date(row$InicioPeriodo, row$FimPeriodo, 1))
totalAllocation <- names(sort(colSums(mainPlanner[, 9:ncol(mainPlanner)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
row[, bestAllocation] <- 1
return(row)
}))
mainPlanner[which(mainPlanner$Id %in% fixedWeirdBehavior$Id), ] <- fixedWeirdBehavior
}, error = function(e) {
cat("Erro ao preencher agendamentos não usuais: ", conditionMessage(e), "\n")
})
colSums(mainPlanner[, 9:ncol(mainPlanner)])
# Map 1-based optional input ports to variables
#dataset1 <- maml.mapInputPort(1) # class: data.frame
dataset1 <- read.csv2("/home/jean/Downloads/OrcamentoPad.csv", stringsAsFactors = F)
columns <- c("Id","InicioPeriodo","FimPeriodo","Status","Observacao","QuantidadeEventos","FrequenciaDia","QuantidadeTotal","ValorUnitario","ValorTotal","OrcamentoId","ProcedimentoId","PacientePadId","PacienteId","Latitude","Longitude")
colnames(dataset1) <- columns
#Agendamento inteligente de pacientes - Zares HomeCare
#Authors: Jean Carlos A. de Souza e Cíntia Fumi Yamamoto
#Carrega as libraries necessarias para o funcionamento do script.
library(dplyr)
library(reshape2)
library(lubridate)
#Realiza a seleção de colunas relevantes para o processo de agendamento
#Converte o Inicio e Fim dos períodos em objetos do tipo Date.
tryCatch({
orcamentoPad <- select(dataset1, Id, InicioPeriodo, FimPeriodo, QuantidadeEventos, FrequenciaDia, QuantidadeTotal, Latitude, Longitude)
orcamentoPad$InicioPeriodo <- as.Date(orcamentoPad$InicioPeriodo, format = '%Y-%m-%d')
orcamentoPad$FimPeriodo <- as.Date(orcamentoPad$FimPeriodo, format = '%Y-%m-%d')
}, error = function(e) {
cat("Erro ao manipular dados: ", conditionMessage(e), "\n")
})
#Cria uma matriz nula com base nos valores max e min das datas do período.
tryCatch({
minDate <- min(orcamentoPad$InicioPeriodo)
maxDate <- max(orcamentoPad$FimPeriodo)
numberOfDays <- as.integer(difftime(maxDate, minDate, units = "days"))
emptyList <- list()
for(i in 0:numberOfDays){
tmpDate <- as.character(minDate + i)
tmpdf <- data.frame(xx = numeric(nrow(orcamentoPad)))
colnames(tmpdf) <- tmpDate
emptyList[[i+1]] <- tmpdf
}
tmpDataset <- do.call(cbind, lapply(emptyList, `[`))
planner <- cbind(orcamentoPad, tmpDataset)
}, error = function(e) {
cat("Erro ao criar a matriz nula: ", conditionMessage(e), "\n")
})
#Cria subsets para cada tipo de FrequenciaDia, para processamento posterior.
daily <- subset(planner, FrequenciaDia == 1)
dayOnDayOff <- subset(planner, FrequenciaDia == 2)
weekly <- subset(planner, FrequenciaDia == 7)
biweekly <- subset(planner, FrequenciaDia == 15 | FrequenciaDia == 16)
monthly <- subset(planner, FrequenciaDia == 30 | FrequenciaDia == 31)
#Efetua o preenchimento do calendário para pacientes com frequencia diaria.
tryCatch({
for(i in 1:nrow(daily)) {
ifelse(daily[i, ]$InicioPeriodo == daily[i, ]$FimPeriodo,
daily[i , as.character(daily[i, "InicioPeriodo"])] <- daily[i, "QuantidadeTotal"],
ifelse(daily[i, ]$QuantidadeTotal <= numberOfDays+1 & daily[i, ]$QuantidadeEventos == 1,
{
qtdEventos <- daily[i, ]$QuantidadeTotal
period <- as.character(seq.Date(daily[i, "InicioPeriodo"], daily[i, "FimPeriodo"], 1))
totalAllocation <- names(sort(colSums(daily[, 9:ncol(daily)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
daily[i, bestAllocation] <- daily[i, "QuantidadeEventos"]
},
ifelse(daily[i, "QuantidadeTotal"] %% daily[i, "QuantidadeEventos"] == 0,
{
qtdEventos <- daily[i, ]$QuantidadeTotal %/% daily[i, ]$QuantidadeEventos
period <- as.character(seq.Date(daily[i, "InicioPeriodo"], daily[i, "FimPeriodo"], 1))
totalAllocation <- names(sort(colSums(daily[, 9:ncol(daily)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
daily[i, bestAllocation] <- daily[i, "QuantidadeEventos"]
},
{
qtdEventos <- daily[i, ]$QuantidadeTotal
period <- as.character(seq.Date(daily[i, "InicioPeriodo"], daily[i, "FimPeriodo"], 1))
totalAllocation <- names(sort(colSums(daily[, 9:ncol(daily)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
daily[i, bestAllocation] <- daily[i, "QuantidadeEventos"]
daily[i, last(sort(bestAllocation))] <- daily[i, last(sort(bestAllocation))] - (qtdEventos %% daily[i, "QuantidadeEventos"])
}
)
)
)
}
}, error = function(e) {
cat("Erro ao preencher agendamentos diários: ", conditionMessage(e), "\n")
})
#Efetua o preenchimento do calendário para pacientes com frequencia dia sim, dia nao.
tryCatch({
mainPlanner <- rbind(daily, dayOnDayOff)
processedDayOnDayOff <- do.call(rbind, lapply(split(dayOnDayOff, dayOnDayOff$Id), function(row){
qtdEventos <- row$QuantidadeTotal
period <- as.character(seq.Date(row$InicioPeriodo, row$FimPeriodo, 2))
totalAllocation <- names(sort(colSums(mainPlanner[, 9:ncol(mainPlanner)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
row[, bestAllocation] <- 1
return(row)
}))
mainPlanner[which(mainPlanner$Id %in% processedDayOnDayOff$Id), ] <- processedDayOnDayOff
}, error = function(e) {
cat("Erro ao preencher agendamentos dia sim, dia nao: ", conditionMessage(e), "\n")
})
#Efetua o preenchimento do calendário para pacientes com frequencia semanal.
tryCatch({
mainPlanner <- rbind(mainPlanner, weekly)
for(i in min(which(mainPlanner$FrequenciaDia == 7)):nrow(mainPlanner)){
qtdEventos <- mainPlanner[i, ]$QuantidadeTotal
period <- as.character(seq.Date(mainPlanner[i, "InicioPeriodo"], mainPlanner[i, "FimPeriodo"], 1))
ifelse(mainPlanner[i, ]$QuantidadeEventos == 6,
{
weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sun")
},
ifelse(mainPlanner[i, ]$QuantidadeEventos == 5,
{weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sun" & weekday != "Sat")},
ifelse(mainPlanner[i, ]$QuantidadeEventos == 4,
{weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sun" & weekday != "Sat" & weekday != "Wed")},
ifelse(mainPlanner[i, ]$QuantidadeEventos == 3,
{weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday == "Mon" | weekday == "Wed" | weekday == "Fri")},
ifelse(mainPlanner[i, ]$QuantidadeEventos == 2,
{weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday == "Tues" | weekday == "Thurs")},
ifelse(mainPlanner[i, ]$QuantidadeEventos == 1,
{weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday == "Wed" |  weekday == "Thurs")},
print(mainPlanner[i, ])
)
)
)
)
)
)
period <- as.character(weekdayDf$period)
totalAllocation <- names(sort(colSums(mainPlanner[, 9:ncol(mainPlanner)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
mainPlanner[i, bestAllocation] <- 1
}
}, error = function(e) {
cat("Erro ao preencher agendamentos semanais: ", conditionMessage(e), "\n")
})
#Efetua o preenchimento do calendário para pacientes com frequencia quinzenal.
tryCatch({
mainPlanner <- rbind(mainPlanner, biweekly)
for(i in min(which(mainPlanner$FrequenciaDia == 16 | mainPlanner$FrequenciaDia == 15)):nrow(mainPlanner)){
ifelse(mainPlanner[i, ]$QuantidadeTotal == 2,
{
qtdEventos <- mainPlanner[i, ]$QuantidadeEventos
period <- as.character(seq.Date(mainPlanner[i, "InicioPeriodo"], mainPlanner[i, "FimPeriodo"], 1))
validDays <- c("Mon", "Tues", "Wed", "Thurs", "Fri")
firstHalf <- period[1:floor(length(period)/2)]
names(firstHalf) <- wday(firstHalf, label = T)
firstHalf <- subset(firstHalf, names(firstHalf) %in% validDays)
secondHalf <- period[(floor(length(period)/2)+1):length(period)]
names(secondHalf) <- wday(secondHalf, label = T)
secondHalf <- subset(secondHalf, names(secondHalf) %in% validDays)
weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sun")
#period <- as.character(weekdayDf$period)
totalAllocation <- names(sort(colSums(mainPlanner[, 9:ncol(mainPlanner)])))
bestAllocationFH <- totalAllocation[which(totalAllocation %in% firstHalf)]
bestAllocationFH <- bestAllocationFH[1:qtdEventos] %>% na.omit
distFromBAFH <- sapply(secondHalf, function(x){
as.integer(difftime(x, bestAllocationFH, units = "days"))
})
names(distFromBAFH) <- secondHalf
distFromBAFH <- distFromBAFH[distFromBAFH >= 13 & distFromBAFH <= 17] %>% names
bestAllocationSH <- totalAllocation[which(totalAllocation %in% distFromBAFH)]
bestAllocationSH <- bestAllocationSH[1:qtdEventos] %>% na.omit
bestAllocation <- c(bestAllocationFH, bestAllocationSH)
mainPlanner[i, bestAllocation] <- qtdEventos
},
{
qtdEventos <- mainPlanner[i, ]$QuantidadeTotal
period <- as.character(seq.Date(mainPlanner[i, "InicioPeriodo"], mainPlanner[i, "FimPeriodo"], 1))
weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sun" & weekday != "Sat")
period <- as.character(weekdayDf$period)
totalAllocation <- names(sort(colSums(daily[, 9:ncol(daily)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
mainPlanner[i, bestAllocation] <- mainPlanner[i, "QuantidadeEventos"]
}
)
}
}, error = function(e) {
cat("Erro ao preencher agendamentos quinzenais: ", conditionMessage(e), "\n")
})
#Efetua o preenchimento do calendário para pacientes com frequencia mensal.
tryCatch({
mainPlanner <- rbind(mainPlanner, monthly)
for(i in min(which(mainPlanner$FrequenciaDia == 31 | mainPlanner$FrequenciaDia == 30)):nrow(mainPlanner)) {
ifelse(mainPlanner[i, ]$QuantidadeEventos == 1,
{
qtdEventos <- mainPlanner[i, ]$QuantidadeTotal
period <- as.character(seq.Date(mainPlanner[i, "InicioPeriodo"], mainPlanner[i, "FimPeriodo"], 1))
weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sat" & weekday != "Sun")
period <- as.character(weekdayDf$period)
totalAllocation <- names(sort(colSums(mainPlanner[, 9:ncol(mainPlanner)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
mainPlanner[i, bestAllocation] <- 1
},
{
qtdEventos <- 1
period <- as.character(seq.Date(mainPlanner[i, "InicioPeriodo"], mainPlanner[i, "FimPeriodo"], 1))
validDays <- c("Mon", "Tues", "Wed", "Thurs", "Fri")
firstHalf <- period[1:floor(length(period)/2)]
names(firstHalf) <- wday(firstHalf, label = T)
firstHalf <- subset(firstHalf, names(firstHalf) %in% validDays)
secondHalf <- period[(floor(length(period)/2)+1):length(period)]
names(secondHalf) <- wday(secondHalf, label = T)
secondHalf <- subset(secondHalf, names(secondHalf) %in% validDays)
weekdayDf <- data.frame(period = period, weekday = wday(period, label = T)) %>% subset(weekday != "Sun")
#period <- as.character(weekdayDf$period)
totalAllocation <- names(sort(colSums(mainPlanner[, 9:ncol(mainPlanner)])))
bestAllocationFH <- totalAllocation[which(totalAllocation %in% firstHalf)]
bestAllocationFH <- bestAllocationFH[1:qtdEventos] %>% na.omit
distFromBAFH <- sapply(secondHalf, function(x){
as.integer(difftime(x, bestAllocationFH, units = "days"))
})
names(distFromBAFH) <- secondHalf
distFromBAFH <- distFromBAFH[distFromBAFH >= 13 & distFromBAFH <= 17] %>% names
bestAllocationSH <- totalAllocation[which(totalAllocation %in% distFromBAFH)]
bestAllocationSH <- bestAllocationSH[1:qtdEventos] %>% na.omit
bestAllocation <- c(bestAllocationFH, bestAllocationSH)
mainPlanner[i, bestAllocation] <- 1
}
)
}
}, error = function(e) {
cat("Erro ao preencher agendamentos mensais: ", conditionMessage(e), "\n")
})
#Efetua o preenchimento do calendário para pacientes com valores de QuantidadeTotal, QuantidadeEventos ou FrequenciaDia diferentes do padrao existente.
tryCatch({
weirdBehavior <- data.frame(rowSums(mainPlanner[, 9:ncol(mainPlanner)]))
colnames(weirdBehavior) <- "sumOfRows"
weirdBehavior <- subset(weirdBehavior, sumOfRows == 0) %>% rownames
fixedWeirdBehavior <- do.call(rbind, lapply(split(mainPlanner[weirdBehavior, ], mainPlanner[weirdBehavior, "Id"]), function(row){
qtdEventos <- row$QuantidadeTotal
period <- as.character(seq.Date(row$InicioPeriodo, row$FimPeriodo, 1))
totalAllocation <- names(sort(colSums(mainPlanner[, 9:ncol(mainPlanner)])))
bestAllocation <- totalAllocation[which(totalAllocation %in% period)]
bestAllocation <- bestAllocation[1:qtdEventos] %>% na.omit
row[, bestAllocation] <- 1
return(row)
}))
mainPlanner[which(mainPlanner$Id %in% fixedWeirdBehavior$Id), ] <- fixedWeirdBehavior
}, error = function(e) {
cat("Erro ao preencher agendamentos não usuais: ", conditionMessage(e), "\n")
})
colSums(mainPlanner[, 9:ncol(mainPlanner)])
View(orcamentoPad)
plot(orcamentoPad$Latitude, orcamentoPad$Longitude)
library(geosphere)
coord <- select(orcamentoPad, Latitude, Longitude)
coord
distMatrix <- as.dist(distm(coord, fun=distVincentyEllipsoid))
warnings()
coord <- select(orcamentoPad, Longitude, Latitude)
distMatrix <- as.dist(distm(coord, fun=distVincentyEllipsoid))
distMatrix
View(distMatrix)
dim(distMatrix)
distMatrix
class(distMatrix)
distMatrix[1]
distMatrix[100]
length(distMatrix)
options(max.print = 1000)
length(distMatrix)
distMatrix
getOption(max.print)
getOption("max.print")
options(max.print = 100000)
getOption("max.print")
distMatrix
distMatrix
install.packages("blogdown")
library(blogdown)
install_hugo()
new_site(dir = 'a-data-science-odyssey',
theme = 'mtn/cocoa-eh-hugo-theme',
format = 'toml')
new_site(dir = 'github/a-data-science-odyssey',
theme = 'mtn/cocoa-eh-hugo-theme',
format = 'toml')
servr::daemon_stop("116051712")
new_post(title="Como criar um blog em R utilizando blogdown + Hugo!")
#new_post(title="Como criar um blog em R utilizando blogdown + Hugo!")
new_post(title="Como criar um blog em R utilizando blogdown + Hugo!")
new_post(title="hello-world.Rmd")
new_site(dir = 'github/a-data-science-odyssey',
theme = 'mtn/cocoa-eh-hugo-theme',
format = 'toml')
library(blogdown)
serve_site()
setwd("/home/jean/github/a-data-science-odyssey/")
serve_site()
new_post(title="newewwww-hello-world.Rmd")
new_post(title="newewwww-hello-world.Rmd")
servr::daemon_stop("89898640")
serve_site()
build_site()
serve_site()
getwd()
new_post(title="newewwww-hello-world.Rmd")
setwd("/home/jean/github/")
new_post(title="newewwww-hello-world.Rmd")
new_post(title="newewwww-hello-world.Rmd")
servr::daemon_stop("123752992")
new_post(title="newewwww-hello-world.Rmd")
setwd("/home/jean/github/a-data-science-odyssey/")
new_post(title="newewwww-hello-world.Rmd")
blogdown::stop_server()
new_post(title="newewwww-hello-world.Rmd")
new_post(title="newewwww-hello-world.Rmd")
new_post(title="newewwww-hello-world.Rmd")
new_post(title="newewwww-hello-world.Rmd")
new_post(title="newewwww-hello-world.Rmd")
